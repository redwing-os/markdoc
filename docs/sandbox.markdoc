## Vector Sandbox

This documentation is designed adjacent to the main setup you see on the left and is intended to streamline your understanding and implementation of our VectorDB client library within your applications.  

Before diving into database operations, ensure you have acquired the necessary software license and customer ID by subscribing to our service via link below. These credentials are essential for container authentication and will be provided to you via email.

```
To get started visit: https://redwing.ai/plans
```

## Clone Repo & Set Environment Variables

First start by cloning the Sandbox repository and change into its directory

```
git clone https://github.com/redwing-os/sandbox.git

cd sandbox
```

Upon receiving your license key and customer ID in email, add them to a .env file within the newly cloned Sandbox directory:

```
touch .env
```

And enter the following values in the file below for Cassandra configuration:

```
LICENSE_KEY=[your-license-key]
CUSTOMER_ID=[your-customer-id]
DB_PORT=9042
DB_IMAGE=cassandra:latest
RUST_BACKTRACE=full  
DB_STARTUP_CMD=""
```

If you would like to implement ScyllaDB enter the following values in the .env file for configuration:

```
LICENSE_KEY=[your-license-key]
CUSTOMER_ID=[your-customer-id]
DB_PORT=9042
DB_IMAGE=scylladb/scylla:latest
RUST_BACKTRACE=full  
DB_STARTUP_CMD="--smp 1 --memory 750M --overprovisioned 1 --listen-address=0.0.0.0 --rpc-address=0.0.0.0 --broadcast-rpc-address=127.0.0.1"
```

Pull and compose the Vector Docker image, this will start up the server up to the number of cores that are enabled in your software license.

```
docker pull helloredwing/vector && docker-compose up
```

Or run:

```
sh start.sh
```

Once docker is running both the server and the db enter the Cassandra db through the following

```
docker ps
```

The ScyllaDB/Cassandra instance will look something like the following:

```
b9ef8ea004cb   scylladb/cassandra:latest                "docker-entrypoint.sâ€¦"   2 hours ago   Up 2 hours   7000-7001/tcp, 7199/tcp, 9160/tcp, 0.0.0.0:9042->9042/tcp 
```

The ScyllaDB/Cassandra container ID in this instance is `b9ef8ea004cb` from here you can execute the following to enter the container and setup the DB

```
docker exec -it <cassandra-or-scylladb-id> cqlsh
```

Then run cqlsh commands

```
CREATE KEYSPACE redwing_keyspace WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1};

CREATE TABLE redwing_keyspace.vectors (
    key text PRIMARY KEY,
    vector list<float>,
    created_at timestamp,
    updated_at timestamp
);
```

Alternatively run:

```
$ apt-get update && apt-get install -y vim
$ touch db.sh
$ vim db.sh

Copy + Paste db.sh contents here and execute :wq

$ sh db.sh
$ exit
```

This should initialize the Vector database keyspace with redwing_vector and establish some tables for you to work with! You are now ready to start utilizing our client libraries to interact with our database and server.

For convenience, we uploaded example scripts with our Python client for you to run outside the Docker container in the ```run``` folder to run them simply execute the following.

```
python3 test/_test_e2e.py
```

Public Docker Hub image can be viewed here
```
https://hub.docker.com/r/helloredwing/vector
```

For help or questions please reach out to hello [at] redwing.ai

